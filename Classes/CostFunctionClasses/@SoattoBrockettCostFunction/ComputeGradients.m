% Gradients for gradient descent on Soatto/Brockett method
function [f,Df,Hf] = ComputeGradients(c,T,upto)
    if nargin < 3; upto = 2; end;
    T(3) = sqrt(1 - min(1,T(1)^2 + T(2)^2));

    p1 = [  T(1)^6; 
            T(1)^5*T(2); 
            T(1)^5*T(3); 
            T(1)^4*T(2)^2; 
            T(1)^4*T(2)*T(3); 
            T(1)^4*T(3)^2; 
            T(1)^3*T(2)^3; 
            T(1)^3*T(2)^2*T(3); 
            T(1)^3*T(2)*T(3)^2; 
            T(1)^3*T(3)^3; 
            T(1)^2*T(2)^4; 
            T(1)^2*T(2)^3*T(3); 
            T(1)^2*T(2)^2*T(3)^2; 
            T(1)^2*T(2)*T(3)^3; 
            T(1)^2*T(3)^4; 
            T(1)*T(2)^5; 
            T(1)*T(2)^4*T(3); 
            T(1)*T(2)^3*T(3)^2; 
            T(1)*T(2)^2*T(3)^3; 
            T(1)*T(2)*T(3)^4; 
            T(1)*T(3)^5; 
            T(2)^6; 
            T(2)^5*T(3); 
            T(2)^4*T(3)^2; 
            T(2)^3*T(3)^3; 
            T(2)^2*T(3)^4; 
            T(2)*T(3)^5; 
            T(3)^6         ];
    p2 = [  T(1)^2;
            T(1)*T(2);
            T(1)*T(3);
            T(2)^2;
            T(2)*T(3);
            T(3)^2  ];
    OmegaDet = (c.DetCoeffs'*p1);
    Omega = (c.OmegaCoeffs'*p1) / OmegaDet;
    H = c.HCoeffs'*p2;

    f = (T'*c.S*T - H'*Omega);
    if upto == 1; return; end;
    % Compute polynomial gradients
    % Here we use that T(3) = f(T(1),T(2)) = sqrt(1 - (T(1)^2 + T(2)^2))
    % And we use the derivatives of that:
    % dT(3)/dT(1) = -T(1)/sqrt(1 - (T(1)^2 + T(2)^2)) = -T(1)/T(3)
    % dT(3)/dT(2) = -T(2)/sqrt(1 - (T(1)^2 + T(2)^2)) = -T(2)/T(3)
    g1_1 = [  6*T(1)^5;
              5*T(1)^4*T(2);
              5*T(1)^4*T(3);
              4*T(1)^3*T(2)^2;
              4*T(1)^3*T(2)*T(3);
              4*T(1)^3*T(3)^2;
              3*T(1)^2*T(2)^3;
              3*T(1)^2*T(2)^2*T(3);
              3*T(1)^2*T(2)*T(3)^2;
              3*T(1)^2*T(3)^3;
              2*T(1)*T(2)^4;
              2*T(1)*T(2)^3*T(3);
              2*T(1)*T(2)^2*T(3)^2;
              2*T(1)*T(2)*T(3)^3;
              2*T(1)*T(3)^4;
              T(2)^5;
              T(2)^4*T(3);
              T(2)^3*T(3)^2;
              T(2)^2*T(3)^3;
              T(2)*T(3)^4;
              T(3)^5;
              0;
              0;
              0;
              0;
              0;
              0;
              0                       ];
    g1_2 = [  0;
              T(1)^5;
              0;
              2*T(1)^4*T(2);
              T(1)^4*T(3);
              0;
              3*T(1)^3*T(2)^2;
              2*T(1)^3*T(2)*T(3);
              T(1)^3*T(3)^2;
              0;
              4*T(1)^2*T(2)^3;
              3*T(1)^2*T(2)^2*T(3);
              2*T(1)^2*T(2)*T(3)^2;
              T(1)^2*T(3)^3;
              0;
              5*T(1)*T(2)^4;
              4*T(1)*T(2)^3*T(3);
              3*T(1)*T(2)^2*T(3)^2;
              2*T(1)*T(2)*T(3)^3;
              T(1)*T(3)^4;
              0;
              6*T(2)^5;
              5*T(2)^4*T(3);
              4*T(2)^3*T(3)^2;
              3*T(2)^2*T(3)^3;
              2*T(2)*T(3)^4;
              T(3)^5;
              0                       ];
    g1_3 = [  0;
              0;
              T(1)^5;
              0;
              T(1)^4*T(2);
              2*T(1)^4*T(3);
              0;
              T(1)^3*T(2)^2;
              2*T(1)^3*T(2)*T(3);
              3*T(1)^3*T(3)^2;
              0;
              T(1)^2*T(2)^3;
              2*T(1)^2*T(2)^2*T(3);
              3*T(1)^2*T(2)*T(3)^2;
              4*T(1)^2*T(3)^3;
              0;
              T(1)*T(2)^4;
              2*T(1)*T(2)^3*T(3);
              3*T(1)*T(2)^2*T(3)^2;
              4*T(1)*T(2)*T(3)^3;
              5*T(1)*T(3)^4;
              0;
              T(2)^5;
              2*T(2)^4*T(3);
              3*T(2)^3*T(3)^2;
              4*T(2)^2*T(3)^3;
              5*T(2)*T(3)^4;
              6*T(3)^5               ];

    g2_1 = [  2*T(1);
              T(2);
              T(3);
              0;
              0;
              0      ];
    g2_2 = [  0
              T(1);
              0;
              2*T(2);
              T(3);
              0      ];
    g2_3 = [  0;
              0;
              T(1);
              0;
              T(2);
              2*T(3)  ];

    g1 = [g1_1 g1_2 g1_3];
    g2 = [g2_1 g2_2 g2_3];
    % Computing derivative of a quotient, x/y
    DOmega = ((c.OmegaCoeffs'*g1)*(c.DetCoeffs'*p1) - ...
              (c.OmegaCoeffs'*p1)*(c.DetCoeffs'*g1)) ./ ...
              (OmegaDet)^2;
    DH = c.HCoeffs'*g2;
     
    Df1 = (2*c.S*T - (DH'*Omega + DOmega'*H));
    Df = (Df1*(T'*T) - 2*f*T)/((T'*T)^2);
    if upto == 2; return; end;

    Hf = eye(3); 
end